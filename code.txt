// Manacherâ€™s Algorithm


  int N;
  scanf(N);

  int text[4];
  int k = 0;
  while(k < N){
    scanf(text[k]);
    k = k + 1;
  }
  N = 2*N + 1; //Position count
  int L[9]; //LPS Length Array
  L[0] = 0;
  L[1] = 1;
  int C = 1; //centerPosition
  int R = 2; //centerRightPosition
  int i = 0; //currentRightPosition
  int iMirror; //currentLeftPosition
  int maxLPSLength = 0;
  int maxLPSCenterPosition = 0;
  int start = -1;
  int end = -1;
  int diff = -1;

    i = 2;
while(i < N)
    {
      iMirror  = 2*C-i;
      L[i] = 0;
      diff = R - i;
      if(diff > 0)
        if(L[iMirror] > diff)
          L[i] = diff;
        else L[i] = L[iMirror];

      while (1)
        {
            if((i + L[i]) < N);else{break;}
            if((i - L[i]) > 0);else{break;}
            if((i + L[i] + 1) - (i + L[i] + 1) / 2 * 2 == 0){
              L[i]=L[i]+1;
            }
          else if(text[(i + L[i] + 1)/2] <> text[(i - L[i] - 1)/2] ){
            L[i]=L[i]+1;
            continue;
          }
              
        }

      if(L[i] > maxLPSLength)  // Track maxLPSLength
        {
          maxLPSLength = L[i];
          maxLPSCenterPosition = i;
        }

      if (i + L[i] > R)
        {
          C = i;
          R = i + L[i];
        }
      i = i + 1;
    }
  start = (maxLPSCenterPosition - maxLPSLength)/2;
  print(L);
  end = start + maxLPSLength - 1;
i = start;
while(1){
  if(i>end)break;
  print(text[i]);
  i = i + 1;
 }

